fn check(s: string, a: float, b: float) {
  if a == b {
    print(s);
    print(" ");
    printLn("Pass");
  }
  else {
    print(s);
    print(" ");
    printLn("Fail");
  }
}

fn check(s: string, a: string, b: string) {
  if strCmp(a, b) == 0 {
    print(s);
    print(" ");
    printLn("Pass");
  }
  else {
    print(s);
    print(" ");
    printLn("Fail");
  }
}

fn strCmp(str1: string, str2: string) : int {
  let p1: string = str1;
  let p2: string = str2;

  while (*p1 && *p2) && (*p1 == *p2) {
    ++p1;
    ++p2;
  }

  return *p1 - *p2;
}

struct A {
  a: int;
  b: int;
  c: float;
}

class B extends A {
  str: string;
}

class C {
  a: A;
  b: B;
}

struct E {
  a: A[2];
}

struct EE {
  a: E[2][2];
}

fn main() : float {
  {
    printLn("aggregate tests");

    let s: B;

    s.a = 1;
    s.b = 2;
    s.c = 3.0;
    s.str = "Hello";

    check("s.a", s.a, 1);
    check("s.b", s.b, 2);
    check("s.c", s.c, 3);
    check("s.str", s.str, "Hello");
  }
  printLn("");
  {
    printLn("compound aggregates tests");

    let s: C;

    s.a.a = 1;
    s.a.b = 2;
    s.a.c = 3.0;
    s.b.a = 4;
    s.b.b = 5;
    s.b.c = 6.0;
    s.b.str = "Hi";

    check("s.a.a", s.a.a, 1);
    check("s.a.b", s.a.b, 2);
    check("s.a.c", s.a.c, 3);
    check("s.b.a", s.b.a, 4);
    check("s.b.b", s.b.b, 5);
    check("s.b.c", s.b.c, 6);
    check("s.b.str", s.b.str, "Hi");
  }
  printLn("");
  {
    printLn("arrays of aggregates tests");

    let a: A[5];

    a[0].a = 20;
    a[0].b = 2;
    a[0].c = 40;

    check("a[0].a", a[0].a, 20);
    check("a[0].b", a[0].b, 2);
    check("a[0].c", a[0].c, 40);

    let b: E[2];

    b[0].a[1].a = 21;
    b[0].a[1].b = 22;
    b[0].a[1].c = 23;

    check("b[0].a[1].a", b[0].a[1].a, 21);
    check("b[0].a[1].b", b[0].a[1].b, 22);
    check("b[0].a[1].c", b[0].a[1].c, 23);

    check("++b[0].a[1].a", ++b[0].a[1].a, 22);
    check("b[0].a[1].b++", b[0].a[1].b++, 22);

    let e: EE[1];

    e[0].a[0][1].a[0].a = 20;

    check("++e[0].a[0][1].a[0].a", ++e[0].a[0][1].a[0].a, 21);
  }
  
  return 0.0;
}